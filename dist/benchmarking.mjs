#!/usr/bin/env node
var i=(e,t)=>()=>(e&&(t=e(e=0)),t);var q=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);import l from"chalk";import{ZodError as z}from"zod";import{fromZodError as G,ValidationError as R}from"zod-validation-error";function h(e){if(e instanceof R)console.log(l.redBright(e.message));else if(e instanceof z){let t=G(e,{prefixSeparator:`
- `,issueSeparator:`
- `});console.log(l.redBright(t.message))}else e instanceof d?(console.log(l.red(e.message)),console.log(""),console.log(l.blue("To learn more about Vota's configuration, please go to https://github.com/dorafactory"))):e instanceof p?console.log(l.red(e)):console.log(e)}var d,p,f=i(()=>{d=class extends Error{name="NotInsideProjectError";message="You are not inside a benchmark project"},p=class extends Error{name="BenchmarkCliError"}});import{Secp256k1HdWallet as U}from"@cosmjs/launchpad";import{DirectSecp256k1HdWallet as Z}from"@cosmjs/proto-signing";import{GasPrice as _,SigningStargateClient as S}from"@cosmjs/stargate";import{stringToPath as $}from"@cosmjs/crypto";import*as b from"dotenv";async function y(){let e=process.env.MNEMONIC;e===void 0&&(console.log("Missing MNEMONIC in .env"),process.exit(0));let t=await U.fromMnemonic(e,{prefix:M});return await S.connectWithSigner(x,t,{...k})}async function C(e){return await S.connectWithSigner(x,e,{...k})}async function v(e){let t=process.env.MNEMONIC;t===void 0&&(console.log("Missing MNEMONIC in .env"),process.exit(0));let n=$("m/44'/118'/0'/0/"+e.toString());return await Z.fromMnemonic(t,{prefix:M,hdPaths:[n]})}var x,M,k,u=i(()=>{b.config();x="https://vota-testnet-rpc.dorafactory.org",M="dora",k={broadcastPollIntervalMs:8e3,broadcastTimeoutMs:16e3,gasPrice:_.fromString("100000000000peaka")}});import{GasPrice as w,calculateFee as E}from"@cosmjs/stargate";import{coins as O}from"@cosmjs/amino";async function F(e){let t=await y(),n="dora1t58t7azqzq26406uwehgnfekal5kzym3m9lz4k",o=[],r=O("20000000000000000000","peaka");for(let c=0;c<e.length;c++){let m={typeUrl:"/cosmos.bank.v1beta1.MsgSend",value:{fromAddress:n,toAddress:e[c],amount:r}};o.push(m)}let s=w.fromString("100000000000peaka"),a=E(5e4*o.length,s),g=await t.signAndBroadcast(n,o,a);console.log(g.transactionHash)}async function L(e,t){let n=O("1","peaka");for(let o=0;o<e.length;o++){let r=await C(e[o]),[{address:s}]=await e[o].getAccounts(),a=[];for(let m=0;m<t;m++){let j={typeUrl:"/cosmos.bank.v1beta1.MsgSend",value:{fromAddress:s,toAddress:s,amount:n}};a.push(j)}console.log(o,s);let g=w.fromString("100000000000peaka"),c=E(1e5*t,g);r.signAndBroadcast(s,a,c)}}async function A(e,t){let n=[],o=[];for(let r=1;r<=e;r++){let s=await v(r),a=await s.getAccounts();n.push(a[0].address),o.push(s)}console.log(n),await F(n),L(o,t)}var P=i(()=>{u()});var W=i(()=>{f();u();P()});var Q,B,N=i(()=>{W();Q={command:"benchmark",describe:"Benchmark cosmos tools",builder(e){return e.options({repeat:{type:"number",default:100,desc:"Number of repetitions"},thread:{type:"number",default:100,desc:"Number of accounts used for testing"},size:{type:"number",default:1e3,desc:"Quantity included in each transaction"}})},async handler({repeat:e,thread:t,size:n}){let o=e*t*n;console.log(`Total Txs: ${o}`);for(let r=0;r<e;r++)await A(t,n);process.exit(0)}},B=Q});var T,H=i(()=>{N();T=[B]});import V from"yargs";import{hideBin as Y}from"yargs/helpers";import*as I from"dotenv";import D from"chalk";var J=q(()=>{H();f();I.config();V(Y(process.argv)).scriptName("benchmarking").command(T).strict().fail((e,t)=>{console.error(D.red(e)),e.includes("Missing required argument")&&console.log(D.yellow(`Run 'pnpm benchmarking ${process.argv[2]} --help' for a list of available and required arguments.`)),console.log(""),h(t),console.log(""),process.exit(1)}).alias({h:"help"}).argv});export default J();
//# sourceMappingURL=benchmarking.mjs.map