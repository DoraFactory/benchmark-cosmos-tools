{"version":3,"sources":["../src/utils/errors.ts","../src/utils/config.ts","../src/utils/utils.ts","../src/utils/index.ts","../src/commands/benchmark.ts","../src/commands/index.ts","../src/benchmarking.ts"],"sourcesContent":["import chalk from \"chalk\";\nimport { ZodError } from \"zod\";\nimport { fromZodError, ValidationError } from \"zod-validation-error\";\n\nexport class NotInsideProjectError extends Error {\n  name = \"NotInsideProjectError\";\n  message = \"You are not inside a benchmark project\";\n}\n\nexport class VotaOperatorCliError extends Error {\n  name = \"BenchmarkCliError\";\n}\n\nexport function logError(error: unknown) {\n  if (error instanceof ValidationError) {\n    console.log(chalk.redBright(error.message));\n  } else if (error instanceof ZodError) {\n    const validationError = fromZodError(error, {\n      prefixSeparator: \"\\n- \",\n      issueSeparator: \"\\n- \",\n    });\n    console.log(chalk.redBright(validationError.message));\n  } else if (error instanceof NotInsideProjectError) {\n    console.log(chalk.red(error.message));\n    console.log(\"\");\n    // TODO add docs to the website and update the link to the specific page\n    console.log(\n      chalk.blue(\n        `To learn more about Vota's configuration, please go to https://github.com/dorafactory`\n      )\n    );\n  } else if (error instanceof VotaOperatorCliError) {\n    console.log(chalk.red(error));\n  } else {\n    console.log(error);\n  }\n}\n","import { Secp256k1HdWallet } from \"@cosmjs/launchpad\";\nimport { DirectSecp256k1HdWallet, OfflineSigner } from \"@cosmjs/proto-signing\";\nimport {\n  GasPrice,\n  SigningStargateClient,\n  SigningStargateClientOptions,\n} from \"@cosmjs/stargate\";\nimport {\n  SigningCosmWasmClient,\n  SigningCosmWasmClientOptions,\n} from \"@cosmjs/cosmwasm-stargate\";\nimport { HdPath, stringToPath } from \"@cosmjs/crypto\";\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\n// export const rpcEndpoint = \"https://vota-rpc.dorafactory.org\";\n// export const restEndpoint = \"https://vota-rest.dorafactory.org\";\n// export const chainId = \"vota-ash\";\n\nexport const rpcEndpoint = \"https://vota-testnet-rpc.dorafactory.org\";\nexport const restEndpoint = \"https://vota-testnet-rest.dorafactory.org\";\nexport const chainId = \"vota-testnet\";\nexport const prefix = \"dora\";\n\n// export const mnemonic = // dora1t58t7azqzq26406uwehgnfekal5kzym3m9lz4k\n//   \"ride woman device foam siren cruel dove island expand fiber tail exit dynamic alien crouch fish crime story keep law joke sunny they sock\";\n\n// export const contractAddress = \"dora14dky5amkrl4nc0t47pcdth8fjh940mkyfcdup55medx5rj8gsxaqrst236\"\n\n/** Setting to speed up testing */\nconst defaultSigningClientOptions: SigningStargateClientOptions = {\n  broadcastPollIntervalMs: 8_000,\n  broadcastTimeoutMs: 16_000,\n  gasPrice: GasPrice.fromString(\"100000000000peaka\"),\n};\n\nexport async function getSignerClient() {\n  const mnemonic = process.env.MNEMONIC;\n\n  if (mnemonic === undefined) {\n    console.log(\"Missing MNEMONIC in .env\");\n    process.exit(0);\n  }\n  const wallet = await Secp256k1HdWallet.fromMnemonic(mnemonic, {\n    prefix,\n  });\n  const signingStargateClient = await SigningStargateClient.connectWithSigner(\n    rpcEndpoint,\n    wallet,\n    {\n      ...defaultSigningClientOptions,\n    }\n  );\n  return signingStargateClient;\n}\n\nexport async function getSignerClientByWallet(wallet: DirectSecp256k1HdWallet) {\n  const signingStargateClient = await SigningStargateClient.connectWithSigner(\n    rpcEndpoint,\n    wallet,\n    {\n      ...defaultSigningClientOptions,\n    }\n  );\n  return signingStargateClient;\n}\n\nexport async function generateAccount(index: number) {\n  const mnemonic = process.env.MNEMONIC;\n\n  if (mnemonic === undefined) {\n    console.log(\"Missing MNEMONIC in .env\");\n    process.exit(0);\n  }\n\n  const path: HdPath = stringToPath(\n    \"m/44'/\" + \"118\" + \"'/0'/0/\" + index.toString()\n  );\n  const wallet = await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {\n    prefix,\n    hdPaths: [path],\n  });\n\n  return wallet;\n  // return await DirectSecp256k1HdWallet.generate(24, { prefix });\n}\n","import {\n  getSignerClient,\n  generateAccount,\n  getSignerClientByWallet,\n} from \"./config\";\nimport {\n  GasPrice,\n  calculateFee,\n  MsgSendEncodeObject,\n  SignerData,\n} from \"@cosmjs/stargate\";\nimport { DirectSecp256k1HdWallet, OfflineSigner } from \"@cosmjs/proto-signing\";\nimport { HdPath, stringToPath } from \"@cosmjs/crypto\";\nimport { coins, makeCosmoshubPath } from \"@cosmjs/amino\";\nimport { AuthInfo, TxBody, TxRaw } from \"cosmjs-types/cosmos/tx/v1beta1/tx\";\n\nexport async function batchSend(recipients: string[]) {\n  let client = await getSignerClient();\n\n  let signerAddr = \"dora1t58t7azqzq26406uwehgnfekal5kzym3m9lz4k\";\n\n  let msgs: MsgSendEncodeObject[] = [];\n\n  // const recipient = \"dora12xkk5rrk6ex2j0yt6kelsqs6yg4nghax7fq924\";\n  const amount = coins(\"20000000000000000000\", \"peaka\");\n  for (let i = 0; i < recipients.length; i++) {\n    const sendMsg: MsgSendEncodeObject = {\n      typeUrl: \"/cosmos.bank.v1beta1.MsgSend\",\n      value: {\n        fromAddress: signerAddr,\n        toAddress: recipients[i],\n        amount: amount,\n      },\n    };\n\n    msgs.push(sendMsg);\n  }\n\n  const gasPrice = GasPrice.fromString(\"100000000000peaka\");\n  const fee = calculateFee(50000 * msgs.length, gasPrice);\n  const result = await client.signAndBroadcast(signerAddr, msgs, fee);\n  console.log(result.transactionHash);\n}\n\nexport async function multiBatchSend(\n  signer: DirectSecp256k1HdWallet[],\n  packageSize: number\n) {\n  // const recipient = \"dora12xkk5rrk6ex2j0yt6kelsqs6yg4nghax7fq924\";\n  const amount = coins(\"1\", \"peaka\");\n  for (let i = 0; i < signer.length; i++) {\n    let client = await getSignerClientByWallet(signer[i]);\n\n    let [{ address }] = await signer[i].getAccounts();\n    // const sendMsg: MsgSendEncodeObject = {\n    //   typeUrl: \"/cosmos.bank.v1beta1.MsgSend\",\n    //   value: {\n    //     fromAddress: address,\n    //     toAddress: address,\n    //     amount: amount,\n    //   },\n    // };\n    let msgs: MsgSendEncodeObject[] = [];\n    for (let i = 0; i < packageSize; i++) {\n      const sendMsg: MsgSendEncodeObject = {\n        typeUrl: \"/cosmos.bank.v1beta1.MsgSend\",\n        value: {\n          fromAddress: address,\n          toAddress: address,\n          amount: amount,\n        },\n      };\n\n      msgs.push(sendMsg);\n    }\n\n    console.log(i, address);\n\n    const gasPrice = GasPrice.fromString(\"100000000000peaka\");\n    const fee = calculateFee(100000 * packageSize, gasPrice);\n    client.signAndBroadcast(address, msgs, fee);\n  }\n}\n\nexport async function benchmarkTest(thread: number, packageSize: number) {\n  // let thread = 10000;\n  let accountAddresslist: string[] = [];\n  let signerList: DirectSecp256k1HdWallet[] = [];\n  for (let i = 1; i <= thread; i++) {\n    let signer = await generateAccount(i);\n    let accountDetail = await signer.getAccounts();\n    accountAddresslist.push(accountDetail[0].address);\n    signerList.push(signer);\n  }\n  console.log(accountAddresslist);\n\n  await batchSend(accountAddresslist);\n\n  multiBatchSend(signerList, packageSize);\n}\n","export * from \"./errors\";\nexport * from \"./config\";\nexport * from \"./utils\";\n","import * as fs from \"fs\";\n\nimport type { CommandModule } from \"yargs\";\n\nimport { benchmarkTest } from \"../utils\";\n\ntype Options = {\n  repeat: number;\n  thread: number;\n  size: number;\n};\n\nconst commandModule: CommandModule<Options, Options> = {\n  command: \"benchmark\",\n\n  describe: \"Benchmark cosmos tools\",\n\n  builder(yargs) {\n    return yargs.options({\n      repeat: {\n        type: \"number\",\n        default: 100,\n        desc: \"Number of repetitions\",\n      },\n      thread: {\n        type: \"number\",\n        default: 100,\n        desc: \"Number of accounts used for testing\",\n      },\n      size: {\n        type: \"number\",\n        default: 1000,\n        desc: \"Quantity included in each transaction\",\n      },\n    });\n  },\n\n  async handler({ repeat, thread, size }) {\n    let totalTxs = repeat * thread * size;\n    console.log(`Total Txs: ${totalTxs}`);\n    for (let i = 0; i < repeat; i++) {\n      await benchmarkTest(thread, size);\n    }\n    process.exit(0);\n  },\n};\n\nexport default commandModule;\n","import { CommandModule } from \"yargs\";\n\nimport benchmark from \"./benchmark\";\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any -- Each command has different options\nexport const commands: CommandModule<any, any>[] = [benchmark];\n","#!/usr/bin/env node\n\nimport yargs from \"yargs\";\nimport { hideBin } from \"yargs/helpers\";\nimport * as dotenv from \"dotenv\";\nimport chalk from \"chalk\";\n\nimport { commands } from \"./commands\";\nimport { logError } from \"./utils/errors\";\n\n// Load .env file into process.env\n\ndotenv.config();\n\nyargs(hideBin(process.argv))\n  // Explicit name to display in help (by default it's the entry file, which may not be \"benchmarking\" for e.g. ts-node)\n  .scriptName(\"benchmarking\")\n  // Use the commands directory to scaffold\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- command array overload isn't typed, see https://github.com/yargs/yargs/blob/main/docs/advanced.md#esm-hierarchy\n  .command(commands as any)\n  // Enable strict mode.\n  .strict()\n  // Custom error handler\n  .fail((msg, err) => {\n    console.error(chalk.red(msg));\n    if (msg.includes(\"Missing required argument\")) {\n      console.log(\n        chalk.yellow(\n          `Run 'pnpm benchmarking ${process.argv[2]} --help' for a list of available and required arguments.`\n        )\n      );\n    }\n    console.log(\"\");\n    logError(err);\n    console.log(\"\");\n\n    process.exit(1);\n  })\n  // Useful aliases.\n  .alias({ h: \"help\" }).argv;\n"],"mappings":"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","names":["chalk","ZodError","fromZodError","ValidationError","logError","error","validationError","NotInsideProjectError","VotaOperatorCliError","init_errors","__esmMin","Secp256k1HdWallet","DirectSecp256k1HdWallet","GasPrice","SigningStargateClient","stringToPath","dotenv","getSignerClient","mnemonic","wallet","prefix","rpcEndpoint","defaultSigningClientOptions","getSignerClientByWallet","generateAccount","index","path","init_config","__esmMin","GasPrice","calculateFee","coins","batchSend","recipients","client","getSignerClient","signerAddr","msgs","amount","i","sendMsg","gasPrice","fee","result","multiBatchSend","signer","packageSize","getSignerClientByWallet","address","benchmarkTest","thread","accountAddresslist","signerList","generateAccount","accountDetail","init_utils","__esmMin","init_config","init_utils","__esmMin","init_errors","init_config","commandModule","benchmark_default","init_benchmark","__esmMin","init_utils","yargs","repeat","thread","size","totalTxs","i","benchmarkTest","commands","init_commands","__esmMin","init_benchmark","benchmark_default","yargs","hideBin","dotenv","chalk","require_benchmarking","__commonJSMin","init_commands","init_errors","commands","msg","err","logError"]}